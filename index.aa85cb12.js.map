{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write code here\n/* eslint-disable indent */ document.addEventListener(\"DOMContentLoaded\", function() {\n    var body = document.querySelector(\"body\");\n    var table = document.querySelector(\"table\");\n    var headers = table.querySelectorAll(\"th\");\n    var currentSortIndex = -1; // Index of the currently sorted column\n    var currentSortOrder = 1; // 1 for ascending, -1 for descending\n    var tbody = table.querySelector(\"tbody\");\n    var rows = Array.from(tbody.querySelectorAll(\"tr\"));\n    // To sort columns\n    headers.forEach(function(header, index) {\n        header.addEventListener(\"click\", function() {\n            // const tbody = table.querySelector('tbody');\n            // const rows = Array.from(tbody.querySelectorAll('tr'));\n            // Always sort in ascending order when a new header is clicked\n            if (index !== currentSortIndex) {\n                currentSortOrder = 1; // Reset to ascending order for new column\n                currentSortIndex = index; // Update current sort index\n            } else // Toggle sort order for the same column\n            currentSortOrder *= -1;\n            rows.sort(function(a, b) {\n                var cellA = a.cells[index].textContent.trim();\n                var cellB = b.cells[index].textContent.trim();\n                // Handle different data types\n                if (index === 3) // Age column\n                return (Number(cellA) - Number(cellB)) * currentSortOrder;\n                else if (index === 4) {\n                    // Salary column\n                    var numA = parseFloat(cellA.replace(/[^0-9.-]+/g, \"\"));\n                    var numB = parseFloat(cellB.replace(/[^0-9.-]+/g, \"\"));\n                    return (numA - numB) * currentSortOrder;\n                } else return cellA.localeCompare(cellB) * currentSortOrder;\n            });\n            // Clear existing sort classes from headers\n            headers.forEach(function(th) {\n                return th.classList.remove(\"ascending\", \"descending\");\n            });\n            // Add the appropriate class to the sorted column header\n            if (currentSortOrder === 1) headers[index].classList.add(\"ascending\");\n            else headers[index].classList.add(\"descending\");\n            tbody.innerHTML = \"\";\n            rows.forEach(function(row) {\n                return tbody.appendChild(row);\n            });\n        });\n    });\n    // To highlight the row\n    tbody.addEventListener(\"click\", function(el) {\n        var clickedRow = el.target.closest(\"tr\");\n        if (clickedRow) {\n            tbody.querySelectorAll(\"tr.active\").forEach(function(row) {\n                return row.classList.remove(\"active\");\n            });\n            clickedRow.classList.add(\"active\");\n        }\n    });\n    // Form\n    var form = document.createElement(\"form\");\n    form.setAttribute(\"id\", \"form\");\n    form.setAttribute(\"class\", \"new-employee-form\");\n    var labelName = document.createElement(\"label\");\n    labelName.textContent = \"Name: \";\n    form.appendChild(labelName);\n    var inputName = document.createElement(\"input\");\n    inputName.setAttribute(\"data-qa\", \"name\");\n    inputName.setAttribute(\"name\", \"name\");\n    inputName.setAttribute(\"type\", \"text\");\n    inputName.setAttribute(\"required\", \"\");\n    labelName.appendChild(inputName);\n    var labelPosition = document.createElement(\"label\");\n    labelPosition.textContent = \"Position: \";\n    form.appendChild(labelPosition);\n    var inputPosition = document.createElement(\"input\");\n    inputPosition.setAttribute(\"data-qa\", \"position\");\n    inputPosition.setAttribute(\"name\", \"position\");\n    inputPosition.setAttribute(\"type\", \"text\");\n    inputPosition.setAttribute(\"required\", \"\");\n    labelPosition.appendChild(inputPosition);\n    var labelOffice = document.createElement(\"label\");\n    labelOffice.textContent = \"Office: \";\n    var selectOffice = document.createElement(\"select\");\n    selectOffice.setAttribute(\"data-qa\", \"office\");\n    var options = [\n        {\n            value: \"Tokyo\",\n            text: \"Tokyo\"\n        },\n        {\n            value: \"Singapore\",\n            text: \"Singapore\"\n        },\n        {\n            value: \"London\",\n            text: \"London\"\n        },\n        {\n            value: \"New York\",\n            text: \"New York\"\n        },\n        {\n            value: \"San Francisco\",\n            text: \"San Francisco\"\n        },\n        {\n            value: \"Edinburgh\",\n            text: \"Edinburgh\"\n        }\n    ];\n    options.forEach(function(optionData) {\n        var option = document.createElement(\"option\");\n        option.value = optionData.value;\n        option.textContent = optionData.text;\n        selectOffice.appendChild(option);\n    });\n    labelOffice.appendChild(selectOffice);\n    selectOffice.setAttribute(\"required\", \"\");\n    form.appendChild(labelOffice);\n    var labelAge = document.createElement(\"label\");\n    labelAge.textContent = \"Age: \";\n    form.appendChild(labelAge);\n    var inputAge = document.createElement(\"input\");\n    inputAge.setAttribute(\"data-qa\", \"age\");\n    inputAge.setAttribute(\"name\", \"age\");\n    inputAge.setAttribute(\"type\", \"number\");\n    inputAge.setAttribute(\"required\", \"\");\n    labelAge.appendChild(inputAge);\n    var labelSalary = document.createElement(\"label\");\n    labelSalary.textContent = \"Salary: \";\n    form.appendChild(labelSalary);\n    var inputSalary = document.createElement(\"input\");\n    inputSalary.setAttribute(\"data-qa\", \"salary\");\n    inputSalary.setAttribute(\"name\", \"salary\");\n    inputSalary.setAttribute(\"type\", \"text\");\n    inputSalary.setAttribute(\"required\", \"\");\n    labelSalary.appendChild(inputSalary);\n    // Format salary input with a $ sign and thousands separators\n    function formatSalary(value) {\n        // Remove any non-digit characters\n        var rawValue = value.replace(/[^0-9]/g, \"\");\n        // Convert to number and format with commas and dollar sign\n        return rawValue ? new Intl.NumberFormat(\"en-US\", {\n            style: \"currency\",\n            currency: \"USD\",\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n        }).format(parseInt(rawValue)) : \"\";\n    }\n    inputSalary.addEventListener(\"input\", function(events) {\n        events.target.value = formatSalary(events.target.value);\n    });\n    inputSalary.addEventListener(\"blur\", function(events) {\n        events.target.value = formatSalary(events.target.value);\n    });\n    inputSalary.addEventListener(\"input\", function() {\n        var cursorPosition = inputSalary.selectionStart;\n        var oldLength = inputSalary.value.length;\n        inputSalary.value = formatSalary(inputSalary.value);\n        var newLength = inputSalary.value.length;\n        // Adjust cursor position if a $ was added\n        inputSalary.setSelectionRange(cursorPosition + (newLength - oldLength), cursorPosition + (newLength - oldLength));\n    });\n    inputSalary.addEventListener(\"blur\", function() {\n        inputSalary.value = formatSalary(inputSalary.value);\n    });\n    function showNotification(type, title, message) {\n        var notification = document.createElement(\"div\");\n        notification.classList.add(\"notification\", type);\n        notification.setAttribute(\"data-qa\", \"notification\");\n        var titleElement = document.createElement(\"span\");\n        titleElement.classList.add(\"title\");\n        titleElement.textContent = title;\n        var messageElement = document.createElement(\"p\");\n        messageElement.textContent = message;\n        notification.appendChild(titleElement);\n        notification.appendChild(messageElement);\n        body.appendChild(notification);\n        setTimeout(function() {\n            body.removeChild(notification);\n        }, 3000);\n    }\n    // Button to add a new row\n    var button = document.createElement(\"button\");\n    button.textContent = \"Save to table\";\n    button.setAttribute(\"type\", \"submit\");\n    button.setAttribute(\"data-qa\", \"save-button\");\n    button.addEventListener(\"click\", function(events) {\n        events.preventDefault();\n        var nameEntered = inputName.value.trim();\n        var age = parseInt(inputAge.value.trim(), 10);\n        var position = inputPosition.value.trim();\n        if (nameEntered.length < 4) {\n            showNotification(\"error\", \"Invalid Data\", \"Name must be at least 4 characters long.\");\n            return;\n        }\n        if (isNaN(age) || age < 18 || age > 90) {\n            showNotification(\"error\", \"Invalid Age\", \"Age must be between 18 and 90.\");\n            return;\n        }\n        if (!position) {\n            showNotification(\"error\", \"Position undefrined\", \"Position should be added.\");\n            return;\n        }\n        var newTr = document.createElement(\"tr\");\n        tbody.appendChild(newTr);\n        var inputs = form.querySelectorAll(\"input, select\");\n        inputs.forEach(function(input) {\n            var newTd = document.createElement(\"td\");\n            newTd.textContent = input.value;\n            newTr.appendChild(newTd);\n        });\n        showNotification(\"success\", \"Employee Added\", \"New employee successfully added to the table.\");\n        form.reset();\n    });\n    form.appendChild(button);\n    body.appendChild(form);\n});\n\n//# sourceMappingURL=index.aa85cb12.js.map\n","'use strict';\n\n// write code here\n\n/* eslint-disable indent */\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const body = document.querySelector('body');\n  const table = document.querySelector('table');\n  const headers = table.querySelectorAll('th');\n  let currentSortIndex = -1; // Index of the currently sorted column\n  let currentSortOrder = 1; // 1 for ascending, -1 for descending\n\n  const tbody = table.querySelector('tbody');\n  const rows = Array.from(tbody.querySelectorAll('tr'));\n\n  // To sort columns\n  headers.forEach((header, index) => {\n    header.addEventListener('click', () => {\n      // const tbody = table.querySelector('tbody');\n      // const rows = Array.from(tbody.querySelectorAll('tr'));\n\n      // Always sort in ascending order when a new header is clicked\n      if (index !== currentSortIndex) {\n        currentSortOrder = 1; // Reset to ascending order for new column\n        currentSortIndex = index; // Update current sort index\n      } else {\n        // Toggle sort order for the same column\n        currentSortOrder *= -1;\n      }\n\n      rows.sort((a, b) => {\n        const cellA = a.cells[index].textContent.trim();\n        const cellB = b.cells[index].textContent.trim();\n\n        // Handle different data types\n        if (index === 3) {\n          // Age column\n          return (Number(cellA) - Number(cellB)) * currentSortOrder;\n        } else if (index === 4) {\n          // Salary column\n          const numA = parseFloat(cellA.replace(/[^0-9.-]+/g, ''));\n          const numB = parseFloat(cellB.replace(/[^0-9.-]+/g, ''));\n\n          return (numA - numB) * currentSortOrder;\n        } else {\n          return cellA.localeCompare(cellB) * currentSortOrder;\n        }\n      });\n\n      // Clear existing sort classes from headers\n      headers.forEach((th) => th.classList.remove('ascending', 'descending'));\n\n      // Add the appropriate class to the sorted column header\n      if (currentSortOrder === 1) {\n        headers[index].classList.add('ascending');\n      } else {\n        headers[index].classList.add('descending');\n      }\n\n      tbody.innerHTML = '';\n      rows.forEach((row) => tbody.appendChild(row));\n    });\n  });\n\n  // To highlight the row\n  tbody.addEventListener('click', (el) => {\n    const clickedRow = el.target.closest('tr');\n\n    if (clickedRow) {\n      tbody\n        .querySelectorAll('tr.active')\n        .forEach((row) => row.classList.remove('active'));\n      clickedRow.classList.add('active');\n    }\n  });\n\n  // Form\n  const form = document.createElement('form');\n\n  form.setAttribute('id', 'form');\n  form.setAttribute('class', 'new-employee-form');\n\n  const labelName = document.createElement('label');\n\n  labelName.textContent = 'Name: ';\n  form.appendChild(labelName);\n\n  const inputName = document.createElement('input');\n\n  inputName.setAttribute('data-qa', 'name');\n  inputName.setAttribute('name', 'name');\n  inputName.setAttribute('type', 'text');\n  inputName.setAttribute('required', '');\n  labelName.appendChild(inputName);\n\n  const labelPosition = document.createElement('label');\n\n  labelPosition.textContent = 'Position: ';\n  form.appendChild(labelPosition);\n\n  const inputPosition = document.createElement('input');\n\n  inputPosition.setAttribute('data-qa', 'position');\n  inputPosition.setAttribute('name', 'position');\n  inputPosition.setAttribute('type', 'text');\n  inputPosition.setAttribute('required', '');\n  labelPosition.appendChild(inputPosition);\n\n  const labelOffice = document.createElement('label');\n\n  labelOffice.textContent = 'Office: ';\n\n  const selectOffice = document.createElement('select');\n\n  selectOffice.setAttribute('data-qa', 'office');\n\n  const options = [\n    { value: 'Tokyo', text: 'Tokyo' },\n    { value: 'Singapore', text: 'Singapore' },\n    { value: 'London', text: 'London' },\n    { value: 'New York', text: 'New York' },\n    { value: 'San Francisco', text: 'San Francisco' },\n    { value: 'Edinburgh', text: 'Edinburgh' },\n  ];\n\n  options.forEach((optionData) => {\n    const option = document.createElement('option');\n\n    option.value = optionData.value;\n    option.textContent = optionData.text;\n    selectOffice.appendChild(option);\n  });\n\n  labelOffice.appendChild(selectOffice);\n  selectOffice.setAttribute('required', '');\n  form.appendChild(labelOffice);\n\n  const labelAge = document.createElement('label');\n\n  labelAge.textContent = 'Age: ';\n  form.appendChild(labelAge);\n\n  const inputAge = document.createElement('input');\n\n  inputAge.setAttribute('data-qa', 'age');\n  inputAge.setAttribute('name', 'age');\n  inputAge.setAttribute('type', 'number');\n  inputAge.setAttribute('required', '');\n  labelAge.appendChild(inputAge);\n\n  const labelSalary = document.createElement('label');\n\n  labelSalary.textContent = 'Salary: ';\n  form.appendChild(labelSalary);\n\n  const inputSalary = document.createElement('input');\n\n  inputSalary.setAttribute('data-qa', 'salary');\n  inputSalary.setAttribute('name', 'salary');\n  inputSalary.setAttribute('type', 'text');\n  inputSalary.setAttribute('required', '');\n  labelSalary.appendChild(inputSalary);\n\n  // Format salary input with a $ sign and thousands separators\n  function formatSalary(value) {\n    // Remove any non-digit characters\n    const rawValue = value.replace(/[^0-9]/g, '');\n\n    // Convert to number and format with commas and dollar sign\n    return rawValue\n      ? new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0,\n        }).format(parseInt(rawValue))\n      : '';\n  }\n\n  inputSalary.addEventListener('input', (events) => {\n    events.target.value = formatSalary(events.target.value);\n  });\n\n  inputSalary.addEventListener('blur', (events) => {\n    events.target.value = formatSalary(events.target.value);\n  });\n\n  inputSalary.addEventListener('input', () => {\n    const cursorPosition = inputSalary.selectionStart;\n    const oldLength = inputSalary.value.length;\n\n    inputSalary.value = formatSalary(inputSalary.value);\n\n    const newLength = inputSalary.value.length;\n\n    // Adjust cursor position if a $ was added\n    inputSalary.setSelectionRange(\n      cursorPosition + (newLength - oldLength),\n      cursorPosition + (newLength - oldLength),\n    );\n  });\n\n  inputSalary.addEventListener('blur', () => {\n    inputSalary.value = formatSalary(inputSalary.value);\n  });\n\n  function showNotification(type, title, message) {\n    const notification = document.createElement('div');\n\n    notification.classList.add('notification', type);\n    notification.setAttribute('data-qa', 'notification');\n\n    const titleElement = document.createElement('span');\n\n    titleElement.classList.add('title');\n    titleElement.textContent = title;\n\n    const messageElement = document.createElement('p');\n\n    messageElement.textContent = message;\n\n    notification.appendChild(titleElement);\n    notification.appendChild(messageElement);\n    body.appendChild(notification);\n\n    setTimeout(() => {\n      body.removeChild(notification);\n    }, 3000);\n  }\n\n  // Button to add a new row\n  const button = document.createElement('button');\n\n  button.textContent = 'Save to table';\n  button.setAttribute('type', 'submit');\n  button.setAttribute('data-qa', 'save-button');\n\n  button.addEventListener('click', (events) => {\n    events.preventDefault();\n\n    const nameEntered = inputName.value.trim();\n    const age = parseInt(inputAge.value.trim(), 10);\n    const position = inputPosition.value.trim();\n\n    if (nameEntered.length < 4) {\n      showNotification(\n        'error',\n        'Invalid Data',\n        'Name must be at least 4 characters long.',\n      );\n\n      return;\n    }\n\n    if (isNaN(age) || age < 18 || age > 90) {\n      showNotification(\n        'error',\n        'Invalid Age',\n        'Age must be between 18 and 90.',\n      );\n\n      return;\n    }\n\n    if (!position) {\n      showNotification(\n        'error',\n        'Position undefrined',\n        'Position should be added.',\n      );\n\n      return;\n    }\n\n    const newTr = document.createElement('tr');\n\n    tbody.appendChild(newTr);\n\n    const inputs = form.querySelectorAll('input, select');\n\n    inputs.forEach((input) => {\n      const newTd = document.createElement('td');\n\n      newTd.textContent = input.value;\n      newTr.appendChild(newTd);\n    });\n\n    showNotification(\n      'success',\n      'Employee Added',\n      'New employee successfully added to the table.',\n    );\n    form.reset();\n  });\n\n  form.appendChild(button);\n  body.appendChild(form);\n});\n"],"names":["document","addEventListener","body","querySelector","table","headers","querySelectorAll","currentSortIndex","currentSortOrder","tbody","rows","Array","from","forEach","header","index","sort","a","b","cellA","cells","textContent","trim","cellB","Number","numA","parseFloat","replace","localeCompare","th","classList","remove","add","innerHTML","row","appendChild","el","clickedRow","target","closest","form","createElement","setAttribute","labelName","inputName","labelPosition","inputPosition","labelOffice","selectOffice","options","value","text","optionData","option","labelAge","inputAge","labelSalary","inputSalary","formatSalary","rawValue","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","parseInt","showNotification","type","title","message","notification","titleElement","messageElement","setTimeout","removeChild","events","cursorPosition","selectionStart","oldLength","length","newLength","setSelectionRange","button","preventDefault","nameEntered","age","position","isNaN","newTr","inputs","input","newTd","reset"],"version":3,"file":"index.aa85cb12.js.map"}